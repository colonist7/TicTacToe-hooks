{"version":3,"sources":["block.js","Stores/store.js","App.js","serviceWorker.js","index.js"],"names":["Block","props","id","signs","useState","sign","setSign","active","setActive","useEffect","gameOver","reset","style","justifyContent","alignItems","onClick","player","changePlayer","store","appStore","board","score","this","EventEmitter","App","getAll","setBoard","setPlayer","setScore","setReset","useCallback","newBoard","calculateWinner","variant","clearStates","count","filter","x","length","console","log","winner","renderBlock","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ad2bd2d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\n\r\nlet Block = (props) => {\r\n    let id = props.id;\r\n    const signs = [\"\", \"x\", \"o\"];\r\n    let [sign, setSign] = useState(signs[0]);\r\n    let [active, setActive] = useState(true);\r\n  \r\n    useEffect(() => {  \r\n\r\n      if(props.gameOver || props.reset) {\r\n        setSign(signs[0]);\r\n        setActive(true);\r\n      }\r\n\r\n    }, [setActive, active, props.gameOver, signs, setSign, props.reset])\r\n  \r\n    return <div style={{\r\n                        \"opacity\": active ? \"1\" : \"0.4\",\r\n                        \"width\": \"60px\", \r\n                        \"height\": \"60px\", \r\n                        \"border\": \"1px solid red\", \r\n                        \"borderRadius\": \"10px\",\r\n                        \"margin\": \"5px\",\r\n                        \"display\" : \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\"\r\n                      }} \r\n                onClick={() => {\r\n                  if(active) {\r\n                    setSign(signs[props.player]);\r\n                    setActive(false);\r\n                    props.changePlayer(id);\r\n                  }\r\n                }} >\r\n                {sign}\r\n              </div>\r\n  }\r\n\r\nexport default Block;\r\n  ","import {EventEmitter} from \"events\";\r\n\r\nclass appStore extends EventEmitter {\r\n    constructor() {\r\n        super()\r\n        this.appStore = {\r\n            board: [0,0,0,0,0,0,0,0,0],\r\n            player: 1,\r\n            score: [0,0],\r\n            reset: false\r\n        }\r\n    }\r\n\r\n    getAll() {\r\n        return this.appStore;\r\n    }\r\n}\r\n\r\nconst store = new appStore();\r\n\r\nexport default store;","import React, {useState, useCallback, useEffect} from 'react';\nimport './App.css';\nimport Block from './block';\nimport store from './Stores/store';\n\nlet App = () => {\n  const [board, setBoard] = useState(store.getAll().board);\n  const [player, setPlayer] = useState(store.getAll().player);\n  const [score, setScore] = useState(store.getAll().board);\n  const [reset, setReset] = useState(store.getAll().reset);\n\n  let changePlayer = useCallback((id) => {  \n        let newBoard = [...board];\n        newBoard[id] = player;\n        setBoard(newBoard);\n\n\n        let currentPlayer = player === 1 ? 2 : 1;\n        setPlayer(currentPlayer);\n\n      }, [player, setPlayer, board, setBoard]);\n\n  let calculateWinner = () => {\n    let winCase = [[0,1,2],\n                  [3,4,5],\n                  [6,7,8],\n                  [0,3,6],\n                  [1,4,7],\n                  [2,5,8],\n                  [0,4,8],\n                  [2,4,6]];\n\n    for(let variant of winCase) {\n        \n        if(board[variant[0]] === board[variant[1]] && board[variant[0]] === board[variant[2]] && board[variant[0]] !== 0){\n          return(board[variant[0]]);\n        } \n    }\n\n    return 0;\n  };\n\n\n  let clearStates = useCallback(() => {\n      let resetTable = () => {\n        setPlayer(1);\n        setBoard([0,0,0,0,0,0,0,0,0]);\n        setReset(false);\n      }\n\n      resetTable();\n  }, [setPlayer, setBoard, setReset])\n\n  let gameOver = () => {\n    let count = board.filter(x => x === 0).length;\n\n    if(calculateWinner() > 0) {   \n      return true;\n    }\n\n    return (count === 0);\n  }\n\n  if(gameOver()) {\n    if(calculateWinner() > 0) {\n      console.log(`player ${calculateWinner()} won !`);\n    } else {\n      console.log(\"free\");\n    }\n  } \n\n  useEffect(() => { \n    if(gameOver()) {\n      clearStates();\n    }\n\n    console.log(\"reset\", reset);\n    if(reset === true) {\n      clearStates();\n    }\n\n    if(calculateWinner() !== 0) {\n      clearStates();\n    }\n\n    let winner = calculateWinner();\n\n    if(winner === 1) {\n      setScore([score[0] + 1, score[1]]);\n    } else if (winner === 2) {\n      setScore([score[0], score[1] + 1]);\n    }\n  })\n\n  let renderBlock = (id) => {\n    return <Block id={id} player = {player} changePlayer={changePlayer} gameOver={gameOver()} reset={reset}/>\n  };\n\n  return <div>\n            <h4>{score[0]} : {score[1]}</h4>\n            <button onClick={() => {setReset(true)}}>Reset</button>\n            <div style={{\"display\": \"flex\"}}>\n              {renderBlock(0)}\n              {renderBlock(1)}\n              {renderBlock(2)}\n            </div>\n            <div style={{\"display\": \"flex\"}}>\n              {renderBlock(3)}\n              {renderBlock(4)}\n              {renderBlock(5)}\n            </div>\n            <div style={{\"display\": \"flex\"}}>\n              {renderBlock(6)}\n              {renderBlock(7)}\n              {renderBlock(8)}\n            </div>\n        </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}